#+TITLE: Projeto/Prova P2 de PCS3216
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}

Esse repositório (https://github.com/Adarah/PCS3216) contém uma implementação em Rust de uma CPU e Assembler. Também
possui um intrepretador de uma linguagem de programação fictícia e um
interpretador de uma linguagem de controle, ambos escritos em Python.

* Instalação
 Somente testado no kernel =5.4.44-1-MANJARO=, Rust 1.43.1, Python 3.8.3. As
 depêndencias se encontram no arquivos =.toml= na raíz do repositório.
 1. Clone o repositório
 2. Copie a pasta =example=

* Uso
Para utilizar a CPU/Assembler/Interpretador, escreva um script usando a
linguagem de controle especifícada na prova e forneça ele como argumento para o
executável =controle=. Dentro da pasta =example= existe um script de exemplo
chamado =main.ctrl=, que será explicado mais adiante. As /paths/ dos arquivos
devem ser todas relativas à raiz do valor fornecido à variável =$DISK= no começo
do programa. Por exemplo, se eu tenho um arquivo à ser montado pelo
Assembler chamado =disco/foo.asm=, sendo o disco da MVN uma pasta chamada =disco=,
a maneira correta de invocar o assembler seria:
#+BEGIN_SRC
$JOB admin
$DISK disco
$DISKFILE sisprog   -- sisprog eh o nome do executavel que contem o assembler/cpu
$INFILE foo.asm
$OUTFILE out.bin    -- sera salvo em disco/out.bin
$RUN assembler
$ENDJOB
#+END_SRC

** Ressalvas
O interpretador espera que os valores fornecidos pelo usuário estejam dentro do arquivo
=$DISK/inputs/interpreter_input.txt=. O script a ser executado no
interpretador pode estar em qualquer local dentro do diretório =$DISK=.

A CPU precisa do loader montado em linguagem de máquina para funcionar corretamente. Ela espera que o aquivo do loader se encontre em =$DISK/build/loader.bin=
Caso a linguagem de controle não tivesse a restrição de apenas um arquivo de
entrada, seria possível evitar essas "gambiarras", mas na falta de tempo, essa
foi a solução encontrada.

Os arquivos =interpretador.py= e =sisprog= devem estar dentro do disco da MVN.
Resumidamente, é essencial que a estrutura dos diretórios contenha pelo menos isso:

[[file:./images/screenshot-01.png]]

Os outros arquivos podem estar organizados de acordo com a preferência de cada usuário.

* Comandos de controle
** $Job
Apesar do nome, é um comando de "Login" (conforme especificado no enunciado da prova). Os únicos usuários autorizados são "admin" e "somebody". Como não foi pedido, não foram adicionados comandos para registrar novos usuários
** $DISK
Seleciona uma pasta do host para ser usado como disco do interpretador, CPU, e Assembler
** $DISKFILE
Aqui fiquei em dúvida sobre o significado do comando devido o enunciado estar um
pouco vago, e não haver exemplos nem mesmo nas aulas 23 e 24. Minha
interpretação é que esse comando especifíca o executável a ser utilizado. Por exemplo:
#+BEGIN_SRC
$DISK disk
$DISKFILE sisprog           -- especifica disk/sisprog como o executavel atual
$DISKFILE interpretador.py  -- Troca o executavel para disk/interpretador.py
#+END_SRC

** $CREATE
Simplesmente cria um arquivo vazio. É análogo ao comando =touch= em sistemas Linux. Como não foi pedido, não implementei um comando para criar pastas (o análogo seria =mkdir=)
** $DELETE
Delete um arquivo. É análogo ao comando =rm= em sistemas Linux
** $INFILE
Especifíca um arquivo como entrada da CPU/Assembler/Interpretador
** $OUTFILE
Especifíca um arquivo como saída da CPU/Assembler/Interpretador
** $RUN
Executa a CPU/Assembler/Interpretador. Segue mais um exemplo:
#+BEGIN_SRC
$RUN assembler
$RUN cpu
$RUN interpreter
#+END_SRC
No momento, esses são os três únicos modos de execução disponíveis.

* Teste da linguagem de programação
O interpretador segue o modelo fornecido no enunciado da prova: é uma máquina de
estados com rotinas de tratamento específicas para cada situação. Para
exemplificar o seu funcionamento, vamos analisar o arquivo
=example/disk/inputs/min_max.script=, cujo conteúdo se encontra abaixo:
#+BEGIN_SRC
LET max = 0
LET min = 9999
LET current = 0

loop : READ num
       GOTO end IF num = 0

       GOTO assign_max IF num > max
       GOTO assign_min IF num < min
       GOTO prints

       assign_max : LET max = num
                    # in the first iteration, the number will be higher than max and lower than min
                    GOTO prints IF min < num

       assign_min : LET min = num

       prints : WRITE num
                WRITE max
                WRITE min

       GOTO loop

# Pra fazer um jump, eu preciso de uma expressao, pois nessa linguagem nao eh
# possivel haver labels por si so
end : LET num = 0  # PS: Eu adicionei a funcionalidade para ignorar comentarios
#+END_SRC

Primeiro assinalamos os valores de máximo, mínimo, e inicializamos a variável
=current= que irá conter o valor do número atual sendo lido. Em seguida, criamos
uma label chamada =loop= para que possamos retornar à operação de leitura do
arquivo de entrada do interpretador (=$DISK/inputs/interpreter_input.txt=). Em
seguido, são realizadas operações de jump condicional para saber se iremos
sobreescrever o valor atual das variáveis =max= e =min=. Finalmente, escrevemos
o valor de num, max, e min no arquivo =$OUTFILE=, e entquanto o valor do número
lido não for 0, iremos refazer essas operações.

** Resultado
Usando a sequência numérica [67, 9, 22, 85, 52, 5, 5, 83, 93, 33, 0] como entrada para o arquivo
=min_max.script=, obtemos a seguinte saída:
#+BEGIN_SRC
67
67
67
9
67
9
22
67
9
85
85
9
52
85
9
5
85
5
5
85
5
83
85
5
93
93
5
33
93
5
#+END_SRC

* Testes da linguagem de comando e integração
O conteúdo do arquivo de entrada para teste foi divido em algumas partes para
facilitar a explicação. O arquivo sem divisões se encontra no apêndice A:
#+BEGIN_SRC
$JOB admin
$DISK disk
$DISKFILE sisprog
$DIRECTORY
$CREATE delete_me
$CREATE keep_me
$DELETE delete_me
#+END_SRC
Na primeira linha, fazemos o login no sistema usando o usuário "admin". Em
seguida, especificamos a pasta =example/disk= como sendo o disco das nossas
MVNs. Então especificamos o arquivo =$DISK/sisprog= como sendo o executável a
ser utilizado (lembrando que =sisprog= é o binário escrito em Rust que contém a
CPU e o montador).

Usamos =$DIRECTORY= simplesmente para testar a funcionalidade, e então criamos
dois arquivos, e deletamos um deles.

#+BEGIN_SRC
-- Precisamos montar o loader primeiro
$INFILE inputs/loader.asm
$OUTFILE build/loader.bin
$RUN assembler

$INFILE inputs/hello_world.asm
$OUTFILE build/SM
$RUN assembler

$INFILE build/SM
$OUTFILE outputs/cpu_output
$RUN cpu
#+END_SRC

A primeira coisa a ser fazer agora é fazer a montagem do loader, e gravar em
=$DISK/build/loader.bin=. Em seguida, montamos o arquivo
=$DISK/inputs/hello_world.asm= (Apêndice B). Finalmente, executamos o código
objeto gerado pelo Assembler na nossa CPU.

#+BEGIN_SRC
$LIST inputs/hello_world.asm

$DISKFILE interpretador.py
$OUTFILE outputs/interpreter_output
$INFILE inputs/min_max.script
$RUN interpreter

$ENDJOB
#+END_SRC

Aqui apenas testamos o comando =$LIST= que ainda não havia sido utilizado, e em
seguida testamos a integração com o interpretador. A saída é possui o valor esperado, conforme testado previamente no item anterior.

* Apêndice A
Arquivo contendo um script de teste de integração da linguagem de controle e os subsistemas:
#+BEGIN_SRC
$JOB admin
$DISK disk
$DISKFILE sisprog
$DIRECTORY
$CREATE delete_me
$CREATE keep_me
$DELETE delete_me

-- Precisamos montar o loader primeiro
$INFILE inputs/loader.asm
$OUTFILE build/loader.bin
$RUN assembler

$INFILE inputs/hello_world.asm
$OUTFILE build/SM
$RUN assembler

$INFILE build/SM
$OUTFILE outputs/cpu_output
$RUN cpu

$LIST inputs/hello_world.asm

$DISKFILE interpretador.py
$OUTFILE outputs/interpreter_output
$INFILE inputs/min_max.script
$RUN interpreter

$ENDJOB
#+END_SRC

* Apêndice B
Listagem do arquivo =hello_world.asm=. O comportamento esperado é que a CPU gere
um arquivo que diga "Hello world"
#+BEGIN_SRC
 @ /F00

START
    LD  LDA0
    MM  LDA
    LD  LDA0+1
    MM  LDA+1

LDA
    K   0
    K   0
    PD  0
    LD  LDA+1
    +   ONE
    MM  LDA+1
    JZ  CARRY

CHECK_IF_DONE
    LD  LEN
    -   ONE
    MM  LEN
    JZ  END
    JP  LDA

CARRY
    LD  LDA
    +   ONE
    MM  LDA
    JP  CHECK_IF_DONE


END
    HM  0


@ /100
LEN     K   12
ONE     K   1
COUNT   K   0

LDA0    LD  DATA

@ /200
DATA
    K   "H"
    K   "e"
    K   "l"
    K   "l"
    K   "o"
    K   ","
    K   32                      ; Assembler breaks if you try to use a space character
    K   "w"
    K   "o"
    K   "r"
    K   "l"
    K   "d"
    # START
#+END_SRC
